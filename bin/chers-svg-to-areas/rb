#!/ruby
# coding: utf-8

require 'nokogiri'
require 'pry'
require 'securerandom'
require 'ostruct'
require 'jbuilder'
require 'json'
require 'rmagick'
require 'uri'
require 'optparse'

puts <<INFO if ARGV.empty?
  Usage: #{__FILE__} file.svg*
    where file.svg has the format of http://oakscastle.github.io/map/floor/first/index.svg
  Output: JSON matching https://github.com/oakscastle/event/
INFO

options = OpenStruct.new(host: 'http://localhost/')
OptionParser.new do |opts|
  opts.on("-f", "--force", 'Overwrite') do |v|
    options.force = v
  end
  opts.on("-h", "--host [URL]", 'Location where files will be hosted') do |h|
    options.host = h
    options.host += '/' if not h[-1].eql? '/'
  end
end.parse!

def bounding_box_for(path)
  path = path.children.select{ |child| child.kind_of? Nokogiri::XML::Element }.first if path.name == 'g'
  
  case path.name
  when 'rect'
    path.to_h.slice(*%w(x y width height)).each_with_object({}){ |(k, v), obj| obj[k.to_sym] = v }
  when 'polygon', 'path', 'polyline'
    drawing = Magick::Draw.new
    canvas = Magick::Image.new(10000,10000) { self.background_color = 'white' }
    case path.name
    when 'polyline', 'polygon'
      points = path[:points].split(/\s+|,/).map(&:to_f)
      drawing.send(path.name, *points)
    when 'path'
      drawing.path path[:d]
    end
    drawing.draw canvas
    canvas.trim!

    OpenStruct.new({ x: canvas.page.x, y: canvas.page.y, width: canvas.columns, height: canvas.rows }).tap do |box|
      if path.name.eql? 'polygon'
        points.in_groups_of(2).map{ |grp| { x: grp[0], y: grp[-1] } }.tap do |points|
          points.map_send(:[], :y).min.tap do |min|
            if min < 0
              box.y -= min
              box.height += min
            end
          end
        end
      end
    end
  else
=begin
    images = Magick::Image.from_blob(path.to_xml) do
      self.format = 'SVG'
      self.background_color = 'transparent'
    end
    canvas = images.first.trim!
    { x: canvas.page.x, y: canvas.page.y, width: canvas.columns, height: canvas.rows }
=end
    {}
  end.tap do |out|
    out.class_eval{ define_method(:to_viewbox) { "#{self[:x]} #{self[:y]} #{self[:width]} #{self[:height]}" } }
  end
end

module Enumerable
  def map_send(*args)
    map { |obj| obj.send(*args) }
  end
end

ARGV.each do |filename|
  svg = File.open(filename){ |file| Nokogiri::XML(file) }
  base = URI.unescape(svg.at_xpath('//@area:base').value)

  svg.xpath('//*[@area:id]').map do |area|
    name = area.attributes['id'].value
    id = "#{base}/#{name}"
    filename = "#{id}/svg"
    
    obj = {
      id: id.gsub(/\//, '∕'),
      name: name,
      image: "#{options.host}#{filename}"
    }

    container = {
      id: SecureRandom.uuid,
      area: id.gsub(/\//, '∕')
    }

    FileUtils.mkdir_p id

    Nokogiri::XML::Document.new.tap do |doc|
      out = Nokogiri::XML::Node.new('svg', doc)
      out[:xmlns] = svg.namespaces['xmlns']
      doc.add_child(out)
      out.add_child(area.dup)
      
      bbox = bounding_box_for(area)

      bbox.each{ |k, v| container[k] = v }
    
      if File.exist?(filename) and not options.force
        puts "Skipping Existing: #{filename}"
      else
        File.open(filename, 'w') do |file|
          out[:viewBox] = bbox.to_viewbox
          file.write doc.to_xml
          puts "XML to: #{filename}"
        end
      end
    end

    area.remove

    OpenStruct.new({ area: obj, container: container })
  end.tap do |out|
    filename = "#{base}/json"
    if File.exist?(filename) and not options.force
      puts "Skipping Existing: #{filename}"
    else
      File.open(filename, 'w') do |file|
        areas = out.map(&:area)
        areas.push({
                     id: 'house',
                     name: 'The First Floor',
                     image: "#{options.host}#{base}/svg",
                     containers: out.map(&:container).map_send(:[], :id)
                   })
        file.write(JSON::pretty_generate(JSON::parse({ areas: areas, containers: out.map(&:container) }.to_json)))
        puts "JSON to: #{filename}"
      end
    end
  end
  
  filename = "#{base}/svg"
  if File.exist?(filename) and not options.force
    puts "Skipping Existing: #{filename}"
  else
    File.open(filename, 'w') do |file|
      file.write svg.to_xml
      puts "XML to: #{filename}"
    end
  end
end
