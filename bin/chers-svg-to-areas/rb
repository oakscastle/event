#!/ruby

require 'nokogiri'
require 'pry'
require 'securerandom'
require 'ostruct'
require 'jbuilder'
require 'json'
require 'rmagick'

puts <<INFO if ARGV.empty?
  Usage: #{__FILE__} file.svg*
    where file.svg has the format of http://oakscastle.github.io/map/floor/first/index.svg
  Output: JSON matching https://github.com/oakscastle/event/
INFO

def find_bounding_box(path)
  include Magick

  drawing = Magick::Draw.new
  canvas = Image.new(1500,1000){ self.background_color = 'white' }

  drawing.path path
  drawing.draw canvas
                            
  canvas.trim!

  { x: canvas.page.x, y: canvas.page.y, width: canvas.columns, height: canvas.rows }
end

module Enumerable
  def map_send(*args)
    map { |obj| obj.send(*args) }
  end
end

ARGV.each do |filename|
  svg = File.open(filename){ |file| Nokogiri::XML(file) }
  dir = svg.at_xpath('//@area:base').value
  base_url = svg.at_xpath('//@area:url').value

  svg.xpath('//*[@area:id]').map do |area|
    name = area.attributes['id'].value
    id = "#{dir}/#{name}"

    FileUtils.mkdir_p id

    filename = "#{id}/svg"
    
    if File.exist?(filename)
      puts "Skipping Existing: #{filename}"
    else
      File.open(filename, 'w') do |file|
        Nokogiri::XML::Document.new.tap do |doc|
          svg = Nokogiri::XML::Node.new('svg', doc)
          doc.add_child(svg)
          svg.add_child(area.dup)
        end.tap do |doc|
          file.write doc.to_xml
          puts "XML to: #{filename}"
        end
      end
    end
   
    area = {
      id: id,
      name: name,
      image: "#{base_url}filename"
    }
    
    container = {
      id: SecureRandom.uuid,
      area: id
    }
    
    OpenStruct.new({ area: area, container: container })
  end.tap do |out|
    filename = "#{dir}/json"
    if File.exist?(filename)
      puts "Skipping Existing: #{filename}"
    else
      File.open(filename, 'w') do |file|
        areas = out.map(&:area)
        areas.push({
                     id: dir,
                     name: 'The First Floor',
                     image: "#{dir}/svg",
                     containers: out.map(&:container).map_send(:[], :id)
                   })
        file.write(JSON::pretty_generate(JSON::parse({ areas: areas, containers: out.map(&:container) }.to_json)))
        puts "JSON to: #{filename}"
      end
    end
  end
  
  filename = "#{dir}/svg"
  if File.exist?(filename)
    puts "Skipping Existing: #{filename}"
  else
    File.open(filename, 'w') do |file|
      file.write svg.to_xml
      puts "XML to: #{filename}"
    end
  end
end
