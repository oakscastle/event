#!/ruby
# coding: utf-8

require 'nokogiri'
require 'pry'
require 'securerandom'
require 'ostruct'
require 'jbuilder'
require 'json'
require 'rmagick'
require 'uri'
require 'optparse'

puts <<INFO if ARGV.empty?
  Usage: #{__FILE__} file.svg*
    where file.svg has the format of http://oakscastle.github.io/map/floor/first/index.svg
  Output: JSON matching https://github.com/oakscastle/event/
INFO

options = OpenStruct.new
OptionParser.new do |opts|
  opts.on("-f", "--force", 'Overwrite') do |v|
    options.force = v
  end
end.parse!

def bounding_box_for(path)
  # binding.pry
  
  canvas = Magick::Image.from_blob(path.to_xml) do
    self.format = 'SVG'
    self.background_color = 'transparent'
  end
  canvas = canvas.first.trim!

  if path.name == 'rect'
    path.to_h.slice(*%w(x y width height)).each_with_object({}){ |(k, v), obj| obj[k.to_sym] = v }
  else
    { x: canvas.page.x, y: canvas.page.y, width: canvas.columns, height: canvas.rows }
  end.tap do |out|
    out.class_eval{ define_method(:to_viewbox) { "#{self[:x]} #{self[:y]} #{self[:width]} #{self[:height]}" } }
  end
end

module Enumerable
  def map_send(*args)
    map { |obj| obj.send(*args) }
  end
end

ARGV.each do |filename|
  svg = File.open(filename){ |file| Nokogiri::XML(file) }
  base = URI.unescape(svg.at_xpath('//@area:base').value)
  host = "http://localhost/"

  svg.xpath('//*[@area:id]').map do |area|
    name = area.attributes['id'].value
    id = "#{base}/#{name}"
    filename = "#{id}/svg"
    
    obj = {
      id: id.gsub(/\//, '∕'),
      name: name,
      image: "#{host}#{filename}"
    }

    container = {
      id: SecureRandom.uuid,
      area: id.gsub(/\//, '∕')
    }

    FileUtils.mkdir_p id

    Nokogiri::XML::Document.new.tap do |doc|
      out = Nokogiri::XML::Node.new('svg', doc)
      out[:xmlns] = svg.namespaces['xmlns']
      doc.add_child(out)
      out.add_child(area.dup)
      
      bbox = bounding_box_for(out)

      bbox.each{ |k, v| container[k] = v }
    
      if File.exist?(filename) and not options.force
        puts "Skipping Existing: #{filename}"
      else
        File.open(filename, 'w') do |file|
          out[:viewBox] = bbox.to_viewbox
          file.write doc.to_xml
          puts "XML to: #{filename}"
        end
      end
    end

    area.remove

    OpenStruct.new({ area: obj, container: container })
  end.tap do |out|
    filename = "#{base}/json"
    if File.exist?(filename) and not options.force
      puts "Skipping Existing: #{filename}"
    else
      File.open(filename, 'w') do |file|
        areas = out.map(&:area)
        areas.push({
                     id: 'house',
                     name: 'The First Floor',
                     image: "#{host}#{base}/svg",
                     containers: out.map(&:container).map_send(:[], :id)
                   })
        file.write(JSON::pretty_generate(JSON::parse({ areas: areas, containers: out.map(&:container) }.to_json)))
        puts "JSON to: #{filename}"
      end
    end
  end
  
  filename = "#{base}/svg"
  if File.exist?(filename) and not options.force
    puts "Skipping Existing: #{filename}"
  else
    File.open(filename, 'w') do |file|
      file.write svg.to_xml
      puts "XML to: #{filename}"
    end
  end
end
